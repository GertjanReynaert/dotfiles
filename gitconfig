[init]
  defaultBranch = main
  templatedir = ~/.git_template

[push]
  # Push only the current branch instead of all
  default = current

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]
    ui = auto
  [color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
  [color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
  [color "diff"]
    meta = blue
    frag = magenta bold
    commit = 227 bold
    old = red bold
    new = green bold
    whitespace = red reverse
  [color "status"]
    added = green
    changed = yellow
    untracked = cyan
  [core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[alias]
  # List aliases
  aliases = config --get-regexp alias

  # Checking
  st = status
  d = diff

  # Staging & commiting
  aa = add --all
  unstage = restore --staged
  unstageall = unstage .

  cm = !sh -c 'gitmoji --commit'
  wip = !git add -A && git commit --no-verify -m 'ðŸš§ work in progress [ci skip]'
  cleanup = !git add -A && git commit -m 'ðŸš§ cleanup'

  puhs = push

  uncommit = !sh -c 'git reset HEAD~$1' -
  rs = uncommit

  # Branching
  co = checkout
  back = switch -
  current-branch = rev-parse --abbrev-ref HEAD
  find-main-branch = !sh -c 'git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4'
  main = !sh -c 'git co $(git find-main-branch)'
  rename-branch = !sh -c 'set -e && old=$(git current-branch) && git branch -m "$old" "$1" && git push origin --set-upstream "$1" && git push origin --delete "$old" '
  recent = for-each-ref --sort=committerdate  refs/heads/ --format=\"%(color:blue)%(committerdate:short)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\"
  clean-branches = !sh -c 'git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D' -

  feat = "!f() { git checkout -b feature/\"$1\" 2> /dev/null || git checkout feature/\"$1\"; }; f"
  feature = "!f() { git checkout -b feature/\"$1\" 2> /dev/null || git checkout feature/\"$1\"; }; f"
  bug = "!f() { git checkout -b bug/\"$1\" 2> /dev/null || git checkout hotfix/\"$1\"; }; f"
  hf = "!f() { git checkout -b hotfix/\"$1\" 2> /dev/null || git checkout hotfix/\"$1\"; }; f"
  hotfix = "!f() { git checkout -b hotfix/\"$1\" 2> /dev/null || git checkout hotfix/\"$1\"; }; f"
  dep = "!f() { git checkout -b dependencies/\"$1\" 2> /dev/null || git checkout dependencies/\"$1\"; }; f"
  deps = "!f() { git checkout -b dependencies/\"$1\" 2> /dev/null || git checkout dependencies/\"$1\"; }; f"
  rel = "!f() { git checkout -b release/\"$1\" 2> /dev/null || git checkout release/\"$1\"; }; f"

  # Rebasing
  rebase-on-main = !sh -c 'git pull --rebase origin $(git find-main-branch)'
  sq = !sh -c 'git rebase -i HEAD~$1' -
  continue = !git add -A && git rebase --continue

  # History
  l = !git log --graph --pretty=colored
  hist = log --pretty=format:\"%C(green)%ad%Creset %C(red)%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset\" --abbrev-commit --date=iso
  stat = !sh -c 'git diff --shortstat $1' -

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  br = branch -a -v
  remotes = remote -v

[core]
  # Link custom .gitignore
  excludesfile = ~/.gitignore

  # Auto convert windows line endings to regular LF (Line Feed) when touched
  autocrlf = input

  # Use diff-so-fancy as the default diff viewer
  pager = diff-so-fancy | less --tabs=4 -RFX

[merge]
  ff = only
  # ff flag is used for merging branches into each other
  # ff = false
  conflictStyle = zdiff3

[fetch]
  prune = true

[rebase]
  autosquash = true

[diff]
  colorMoved = zebra
  # Detect copies as well as renames
  renames = copies

[user]
  name = Gertjan Reynaert
  email = gertjan.reynaert@gmail.com
  signingkey = ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwZpSFcb88DsjMJXJjmmvGA+IItV0v14ULqhvrM2f4eHHqAxBS3y/TrOn2+RdulAjD3RjSxvOyZP8vFFfHNgPT1c2UqreTAZmPDMb0AC/VE3oVYBvV1rpeS2yQFPYU7ifTZjSgerNvl65jlp75F7YhArKHvFNQRBoXup7hIez6oPvWrCfUipUYIyU7VA45sRC8SCsVNkIudBmm2vX7zC7j8KVzCMsWjBhJ3ZCmNnUF9ELg54su9kWLc+NxSQdQRgxOKTmlicTttG+6NwqInb0OGHlSD47J7Ls+VZlWN8+Wbxk9ii6s9ysU+jux8ML66pccaVHlAwBo3+8pVEkTeezr

[includeIf "gitdir:~/Code/ITP/"]
  path = ~/.gitconfig-itp

[credential]
  helper = osxkeychain

[pretty]
  colored = format:%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset
[gpg]
 format = ssh
[gpg "ssh"]
  program = /Applications/1Password.app/Contents/MacOS/op-ssh-sign
[commit]
  gpgsign = true
